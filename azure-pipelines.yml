# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
 - master

#For ubuntu OS
# pool:
#   vmImage: ubuntu-latest

pool:
  vmImage: 'windows-latest'

variables:
  BuildConfiguration: 'Release'

steps:
- task: DotNetCoreCLI@2
  displayName: Restore
  inputs:
    command: 'restore'
    projects: '**/*.csproj'
    feedsToUse: 'select'

- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    command: 'build'
    projects: '**/*.csproj'
    arguments: '--configuration $(BuildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: Publish WebAPI
  inputs:
    command: 'publish'
    publishWebProjects: true
    arguments: '--configuration $(BuildConfiguration) --output $(Build.BinariesDirectory)/publish_output'
    zipAfterPublish: false
    modifyOutputPath: false

- task: DotNetCoreCLI@2
  displayName: Publish WebJob
  inputs:
    command: 'publish'
    publishWebProjects: false
    projects: '**/QueueReceiver.csproj'
    arguments: '--configuration $(BuildConfiguration) --output $(Build.BinariesDirectory)/publish_output/App_Data/jobs/continuous/QueueReceiver'
    zipAfterPublish: false
    modifyOutputPath: false

- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '$(Build.BinariesDirectory)/publish_output'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
    replaceExistingArchive: true

#For Linux environment it is enough settings
# - task: SnykSecurityScan@1
#   inputs:
#     serviceConnectionEndpoint: 'Snyk Service Connection'
#     testType: 'app'
#     monitorWhen: 'always'
#     failOnIssues: true
#     additionalArguments: '--all-projects'
#   enabled: true

#For windows
- task: SnykSecurityScan@1
  inputs:
    serviceConnectionEndpoint: 'Snyk Service Connection'
    testType: 'app'
    targetFile: 'D:\a\1\s\TaskWebAPI.sln'
    monitorWhen: 'always'
    failOnIssues: true
  enabled: true

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'

